"""
Django settings for credicxo_task project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from corsheaders.defaults import default_headers

BASE_DIR = Path(__file__).resolve().parent.parent


# secret ket - used for jwt access token generation
SECRET_KEY = '$l&vxd!%#9ji1st*bb5v7p7ky@lung4rmrwvtp2g5-5sj4c^xu'
# refresh secret key - used for jwt refresh token generation
REFRESH_SECRET_KEY = '*eccgw46%^0j!5(7+@k%fzcxw=c0fc#nbfqt9h6b^iv$4cdgwb'

DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
]

# logged out jwt tokens will be kept in this set
blackListedTokens = set()

INSTALLED_APPS = [
    'corsheaders',
    'users',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# added necessary middlewares for csrf post requests
MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
]

ROOT_URLCONF = 'credicxo_task.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'credicxo_task.wsgi.application'


# added database configuration for local postgresql instance with database name 'credicxo-db1' for testing purpose
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'credicxo-db1',  # 'postgres',
        'PORT': '5432',  # '5432'),
        'HOST': 'localhost',  # 'localhost'),
        'USER': 'postgres',  # 'postgres'),
        'PASSWORD': 'super',  # 'super')
    }
}


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# these settingss not required for localhost execution of api, but will be required whenever we are accessing our API through some other (frontend) websites.
# CSRF_COOKIE_DOMAIN = 'credicxo.com'
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SAMESITE_FORCE_ALL = True
SESSION_COOKIE_SECURE = True

# list of origins that can send unsafe requests (post).
CSRF_TRUSTED_ORIGINS = [
    'localhost',
]

# A list of origins that are authorized to make cross-site HTTP requests
CORS_ALLOWED_ORIGINS = [
    'https://localhost',
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    'refreshtoken',
    'Cookie',
    'Set-Cookie',
    'X-CSRFToken',
    'Authentication',
]


# setting our custom User model for authentication scope
AUTH_USER_MODEL = "users.User"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # this is our custom JWT Authentication model
        'users.authentication.SafeJWTAuthentication',

        # required id want to make use of in-built django admin by loggin in with our users
        'rest_framework.authentication.SessionAuthentication',
    ]
}
